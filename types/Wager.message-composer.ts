/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint128, InstantiateMsg, ExecuteMsg, Decimal, Currency, ParamInfo, QueryMsg, Addr, ConfigResponse, Config, Timestamp, Uint64, MatchmakingResponse, MatchmakingItemExport, NFT, TokenStatus, TokenStatusResponse, WagerExport, WagerInfo, WagerResponse, WagersResponse } from "./Wager.types";
export interface WagerMessage {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    params
  }: {
    params: ParamInfo;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setWinner: ({
    currentPrices,
    prevPrices,
    wagerKey
  }: {
    currentPrices: Decimal[][];
    prevPrices: Decimal[][];
    wagerKey: number[][];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  wager: ({
    againstCurrencies,
    currency,
    expiry,
    token
  }: {
    againstCurrencies: Currency[];
    currency: Currency;
    expiry: number;
    token: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  cancel: ({
    token
  }: {
    token: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class WagerMessageComposer implements WagerMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.setWinner = this.setWinner.bind(this);
    this.wager = this.wager.bind(this);
    this.cancel = this.cancel.bind(this);
  }

  updateConfig = ({
    params
  }: {
    params: ParamInfo;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            params
          }
        })),
        funds
      })
    };
  };
  setWinner = ({
    currentPrices,
    prevPrices,
    wagerKey
  }: {
    currentPrices: Decimal[][];
    prevPrices: Decimal[][];
    wagerKey: number[][];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_winner: {
            current_prices: currentPrices,
            prev_prices: prevPrices,
            wager_key: wagerKey
          }
        })),
        funds
      })
    };
  };
  wager = ({
    againstCurrencies,
    currency,
    expiry,
    token
  }: {
    againstCurrencies: Currency[];
    currency: Currency;
    expiry: number;
    token: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          wager: {
            against_currencies: againstCurrencies,
            currency,
            expiry,
            token
          }
        })),
        funds
      })
    };
  };
  cancel = ({
    token
  }: {
    token: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          cancel: {
            token
          }
        })),
        funds
      })
    };
  };
}