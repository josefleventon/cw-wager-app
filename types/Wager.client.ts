/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
import {
  Uint128,
  InstantiateMsg,
  ExecuteMsg,
  Decimal,
  Currency,
  ParamInfo,
  QueryMsg,
  Addr,
  ConfigResponse,
  Config,
  Timestamp,
  Uint64,
  MatchmakingResponse,
  MatchmakingItemExport,
  NFT,
  TokenStatus,
  TokenStatusResponse,
  WagerExport,
  WagerInfo,
  WagerResponse,
  WagersResponse,
} from './Wager.types'
export interface WagerReadOnlyInterface {
  contractAddress: string
  wagers: () => Promise<WagersResponse>
  tokenStatus: ({ token }: { token: number }) => Promise<TokenStatusResponse>
  config: () => Promise<ConfigResponse>
}
export class WagerQueryClient implements WagerReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.wagers = this.wagers.bind(this)
    this.matchmaking = this.matchmaking.bind(this)
    this.tokenStatus = this.tokenStatus.bind(this)
    this.config = this.config.bind(this)
  }

  wagers = async (): Promise<WagersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      wagers: {},
    })
  }
  matchmaking = async (): Promise<MatchmakingResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      matchmaking: {},
    })
  }
  tokenStatus = async ({
    token,
  }: {
    token: number
  }): Promise<TokenStatusResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_status: {
        token,
      },
    })
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
}
export interface WagerInterface extends WagerReadOnlyInterface {
  contractAddress: string
  sender: string
  updateConfig: (
    {
      params,
    }: {
      params: ParamInfo
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>
  setWinner: (
    {
      currentPrices,
      prevPrices,
      wagerKey,
    }: {
      currentPrices: Decimal[][]
      prevPrices: Decimal[][]
      wagerKey: number[][]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>
  wager: (
    {
      againstCurrencies,
      currency,
      expiry,
      token,
    }: {
      againstCurrencies: Currency[]
      currency: Currency
      expiry: number
      token: number
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>
  cancel: (
    {
      token,
    }: {
      token: number
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class WagerClient extends WagerQueryClient implements WagerInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string,
  ) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateConfig = this.updateConfig.bind(this)
    this.setWinner = this.setWinner.bind(this)
    this.wager = this.wager.bind(this)
    this.cancel = this.cancel.bind(this)
  }

  updateConfig = async (
    {
      params,
    }: {
      params: ParamInfo
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          params,
        },
      },
      fee,
      memo,
      funds,
    )
  }
  setWinner = async (
    {
      currentPrices,
      prevPrices,
      wagerKey,
    }: {
      currentPrices: Decimal[][]
      prevPrices: Decimal[][]
      wagerKey: number[][]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_winner: {
          current_prices: currentPrices,
          prev_prices: prevPrices,
          wager_key: wagerKey,
        },
      },
      fee,
      memo,
      funds,
    )
  }
  wager = async (
    {
      againstCurrencies,
      currency,
      expiry,
      token,
    }: {
      againstCurrencies: Currency[]
      currency: Currency
      expiry: number
      token: number
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        wager: {
          against_currencies: againstCurrencies,
          currency,
          expiry,
          token,
        },
      },
      fee,
      memo,
      funds,
    )
  }
  cancel = async (
    {
      token,
    }: {
      token: number
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        cancel: {
          token,
        },
      },
      fee,
      memo,
      funds,
    )
  }
}
